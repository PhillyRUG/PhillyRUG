{
  "hash": "4490973466fd441d6fcab688eafdcc67",
  "result": {
    "markdown": "---\ntitle: \"#TidyTuesday: Ferris Wheels\"\nauthor: \"Cory Cutsail, PhillyRUG\"\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.0     ✔ rsample      1.1.0\n✔ dials        1.0.0     ✔ tibble       3.1.8\n✔ infer        1.0.2     ✔ tidyr        1.2.0\n✔ modeldata    1.0.0     ✔ tune         1.0.0\n✔ parsnip      1.0.0     ✔ workflows    1.0.0\n✔ purrr        0.3.4     ✔ workflowsets 1.0.0\n✔ recipes      1.0.1     ✔ yardstick    1.0.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n```\n:::\n:::\n\n\nWe'll start by reading in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|include: true\n#|message: false\n\nwheels <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-09/wheels.csv')\n\nskimr::skim(wheels)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |       |\n|:------------------------|:------|\n|Name                     |wheels |\n|Number of rows           |73     |\n|Number of columns        |22     |\n|_______________________  |       |\n|Column type frequency:   |       |\n|character                |13     |\n|numeric                  |9      |\n|________________________ |       |\n|Group variables          |None   |\n\n\n**Variable type: character**\n\n|skim_variable       | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|name                |         0|          1.00|   5|  31|     0|       73|          0|\n|opened              |         4|          0.95|  10|  10|     0|       51|          0|\n|closed              |        71|          0.03|  10|  10|     0|        2|          0|\n|country             |         0|          1.00|   2|  12|     0|       26|          0|\n|location            |         2|          0.97|   5|  42|     0|       69|          0|\n|climate_controlled  |        21|          0.71|   2|   3|     0|        3|          0|\n|construction_cost   |         0|          1.00|   7|  43|     0|       28|          0|\n|status              |         5|          0.93|   4|  18|     0|       10|          0|\n|design_manufacturer |        33|          0.55|   5|  53|     0|       36|          0|\n|type                |        22|          0.70|   5|  13|     0|        6|          0|\n|vip_area            |        53|          0.27|   2|   3|     0|        2|          0|\n|ticket_cost_to_ride |        29|          0.60|   1|  48|     0|       39|          0|\n|official_website    |        25|          0.66|  22|  78|     0|       48|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable         | n_missing| complete_rate|    mean|     sd|  p0|    p25|    p50|     p75| p100|hist  |\n|:---------------------|---------:|-------------:|-------:|------:|---:|------:|------:|-------:|----:|:-----|\n|X                     |         0|          1.00|   37.00|  21.22|   1|  19.00|   37.0|   55.00|   73|▇▇▇▇▇ |\n|height                |         1|          0.99|  304.24| 141.03| 130| 197.00|  271.5|  378.75|  728|▇▅▃▁▁ |\n|diameter              |        35|          0.52|  286.76| 146.08|  70| 165.41|  271.0|  361.00|  700|▇▇▇▂▂ |\n|number_of_cabins      |        11|          0.85|   41.94|  11.51|  15|  36.00|   42.0|   48.00|   68|▂▇▇▅▃ |\n|passengers_per_cabin  |        18|          0.75|   11.51|  10.43|   2|   6.00|    8.0|    8.00|   40|▇▁▁▁▁ |\n|seating_capacity      |        18|          0.75|  456.36| 371.64|  64| 258.00|  336.0|  426.00| 1920|▇▂▁▁▁ |\n|hourly_capacity       |        24|          0.67| 1571.18| 957.59| 349| 960.00| 1440.0| 1680.00| 5760|▇▇▁▁▁ |\n|ride_duration_minutes |        12|          0.84|   17.73|   8.05|   6|  12.00|   15.0|   20.00|   40|▇▇▅▃▁ |\n|turns                 |        53|          0.27|    2.00|   1.21|   1|   1.00|    1.0|    3.00|    4|▇▁▁▃▂ |\n:::\n:::\n\n\nHere's a snip from the Tidy Tuesday Github page outlining the variables included in the dataset:\n\n![](images/paste-3B4D6BF8.png){width=\"415\"}\n\nIt could be fun to try to look at the factors determining `ticket_cost_to_ride` -- let's give it a shot. We'll start with a few simple graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wheels,aes(x=construction_cost,y=ticket_cost_to_ride,color=climate_controlled)) + geom_point() + stat_smooth(method='lm')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](tt20220809_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nOof. Looks like we'll need to clean up `ticket_cost_to_ride` and `construction_cost` to make them useful. We'll start with `ticket_cost_to_ride`. It looks like there are semicolons separating what we'll call `cost_types` and hyphens separating the `ticket_cost_to_ride` from the `cost_type` - let's break these out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwheels |> \n  filter(!is.na(ticket_cost_to_ride)) |> \n  select(ticket_cost_to_ride)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                ticket_cost_to_ride\n1                                               3.5\n2                      Adults – 13; VIP – 110 & 140\n3                                              7.87\n4                                              8.15\n5                        Included in Park Admission\n6                                              6.93\n7                                              8.87\n8                                              6.93\n9                    Adults – 8.17; Children – 4.08\n10                   Adults – 4.94; Children – 2.64\n11               Adults – 13; Children -9; VIP – 50\n12                                    Estimated $38\n13                    Adults – 3.26 Children – 1.63\n14                                             4.94\n15                                               25\n16                                                5\n17                                               28\n18                        Regular – 3.55 VIP – 5.92\n19                  Weekdays – 5.01 Weekends – 6.68\n20                 Adults – 13 Children -9 VIP – 50\n21                                                6\n22                                             ~$35\n23 $10.99+tax for Adults and $6.99+tax for Children\n24        Adults – 7.79 Children – 5.19 VIP – 58.41\n25                                              TBA\n26                                                5\n27                  Adults – 12.92; Children – 6.46\n28             Adults – 13 Children – 8.50 VIP – 50\n29                                              2.6\n30                                             4.97\n31                  Adults – 26.05 Children – 16.58\n32                                             4.97\n33                      Adult – $13.50+tax ($14.45)\n34                                             8.16\n35                                         10 to 15\n36                                            17.94\n37                                              3.5\n38                                             6.97\n39                                                7\n40                  Adults – 27.99 Children – 16.41\n41                                            11.41\n42              Adults – 15 Children – 10 VIP – 119\n43                   Adults – 11.69 Children – 5.19\n44                                                7\n```\n:::\n:::\n\n\nSo from a quick review - we've got a little over half of the data with a non-null `ticket_cost_to_ride` and the field requires substantial cleaning. In the interest of time, let's look more closely at the `construction_cost` field as it is a bit cleaner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwheels |> \n  count(construction_cost!='Unknown')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  construction_cost != \"Unknown\"  n\n1                          FALSE 40\n2                           TRUE 33\n```\n:::\n:::\n\n\nHere we're looking at a situation where a little under half of our data is usable (instead of NA's, we now have 'unknown's. Let's build up a model of construction costs and see what it'd imply for this 'unknown' subset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwheels |> \n  filter(construction_cost!='Unknown') |> \n  select(construction_cost) |> \n  mutate(cons_cost_str_len = stringr::str_length(construction_cost)) |>\n  arrange(desc(cons_cost_str_len))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                             construction_cost cons_cost_str_len\n1  Estimated Between $650 and $750 million USD                43\n2                           $13.18 million USD                18\n3                           $45.67 million USD                18\n4                            $9.89 million USD                17\n5                            $2.42 million USD                17\n6                            $6.68 million USD                17\n7                             $290 million USD                16\n8                             $6.8 million USD                16\n9                             $250 million USD                16\n10                            $113 million USD                16\n11                            $3.2 million USD                16\n12                            $580 million USD                16\n13                            $1.5 million USD                16\n14                            $1.2 million USD                16\n15                            $180 million USD                16\n16                            $1.5 million USD                16\n17                            $300 million USD                16\n18                            $7.3 million USD                16\n19                            $2.2 million USD                16\n20                            $337 million USD                16\n21                            $100 million USD                16\n22                             $13 million USD                15\n23                             $90 million USD                15\n24                             $10 million USD                15\n25                             $12 million USD                15\n26                             $10 million USD                15\n27                             $90 million USD                15\n28                             $20 million USD                15\n29                             $20 million USD                15\n30                             $12 million USD                15\n31                             $10 million USD                15\n32                              $6 million USD                14\n33                              $9 million USD                14\n```\n:::\n:::\n\n\nOf the 33 usable records, one is given a range. We'll manually recode that one to a midpoint value (eg, \\$700M). All values are given in millions of USD, so to make our lives easier we'll just `separate` out the numeric bit and multiply by `1e6`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwheels_cons <- wheels |> \n  filter(construction_cost!='Unknown') |> \n  mutate(cons_cost_numeric=\n           ifelse(\n             stringr::str_starts(construction_cost,\n                                 'Estimated Between'),\n             700,\n             NA)) |> \n  tidyr::separate(construction_cost,\n                  into=c('cons_dollars',\n                         'cons_multiplier',\n                         'cons_units'),sep=' ') |> \n  mutate(cons_cost_numeric=\n           ifelse(\n             is.na(cons_cost_numeric),\n             as.numeric(gsub('\\\\$','',cons_dollars)),\n             cons_cost_numeric)) |> \n  select(-one_of(c('cons_dollars','cons_multiplier','cons_units')))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 3 pieces. Additional pieces discarded in 1 rows [9].\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in ifelse(is.na(cons_cost_numeric), as.numeric(gsub(\"\\\\$\", \"\",\ncons_dollars)), : NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\nwheels_cons <- wheels_cons |> \n  mutate(log_cons_cost_numeric = log(cons_cost_numeric))\nggplot(wheels_cons,aes(x=diameter,y=cons_cost_numeric)) + geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 19 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](tt20220809_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWow we have a lot of missing data! Of our 33 available ferris wheels, we see only 14 have an associated diameter. We'll use `recipes` to impute some of our continuous variables, and use `step_novel` and `step_unknown` to handle missing categorical variables.\n\nLet's stick with a simple linear regression for now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_model <- linear_reg()  |>  set_engine(\"lm\")\n\nwheels_recipe <- \n  recipe(log_cons_cost_numeric ~ height + \n           diameter + \n           seating_capacity + \n           ride_duration_minutes + \n           climate_controlled + \n           vip_area,\n         data = wheels_cons) |> \n  step_novel(all_nominal_predictors()) |> \n  step_unknown(all_nominal_predictors()) |> \n  step_dummy(all_nominal_predictors()) |> \n  step_dummy(all_nominal_predictors()) |> \n  step_impute_mean(all_numeric_predictors())\n\nlm_wflow <- \n  workflow() |>  \n  add_model(linear_model) |> \n  add_recipe(wheels_recipe)\n\nwheels_cons_baked <- wheels_recipe |> \n  prep() |> \n  bake(new_data=NULL)\n\n\nlm_fit <- fit(lm_wflow, wheels_cons)\n\nwheels_cons_res <- predict(lm_fit, \n                           new_data = wheels_cons |> \n                             select(-log_cons_cost_numeric))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n```\n:::\n\n```{.r .cell-code}\nwheels_cons <- wheels_cons |> \n  bind_cols(wheels_cons_res) |> \n  mutate(pred_cons_cost = exp(.pred))\n\nggplot(wheels_cons,aes(x=cons_cost_numeric,y=pred_cons_cost)) + \n  geom_point() + \n   coord_trans(\"log2\")\n```\n\n::: {.cell-output-display}\n![](tt20220809_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThis looks ... pretty bad. Let's take a quick look at some model evaluation metrics and call it a night.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_metrics <- metric_set(rmse, rsq, mae)\nreg_metrics(wheels_cons, \n            truth = cons_cost_numeric, \n            estimate = pred_cons_cost)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard     104.   \n2 rsq     standard       0.737\n3 mae     standard      45.7  \n```\n:::\n:::\n\n\nYikes - our RMSE and MAE imply we're off on average by between \\$45 and \\$104 million dollars! We have a pretty high R-squared, but there are about a million reasons why this is a bad metric (and why we might want to trust our model *less* if our R-squared is high ... likely some confounders and excluded variables operating through the ones we're including).\n\nOk - wrapping up, last last thing to do is to take a look at the stuff we had to exclude because it was missing the `construction_cost` variable. How much do we think these guys would cost to build? We'll just throw this into a graph using height as the x-axis variable because it's the only numeric variable besides the index with less than 10 missings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwheels_missing <- \n  wheels |> \n  filter(construction_cost=='Unknown') |> \n  mutate(log_cons_cost_numeric=0, \n         status='Forecasted') \n\nwheels_cons_pred <- predict(lm_fit, \n                           new_data = wheels_missing |> \n                             select(-log_cons_cost_numeric))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n```\n:::\n\n```{.r .cell-code}\nwheels_missing <- wheels_missing |>   \n  bind_cols(wheels_cons_pred) |> \n  mutate(pred_cons_cost = exp(.pred)) |> \n  # for viz purposes, set the 'cost' to the prediction\n  mutate(cons_cost_numeric = pred_cons_cost)\n  \nggplot(bind_rows(wheels_missing,\n                 wheels_cons |> mutate(status='Actual')),\n       aes(x=height,y=cons_cost_numeric,color=status)) + geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](tt20220809_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "tt20220809_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}